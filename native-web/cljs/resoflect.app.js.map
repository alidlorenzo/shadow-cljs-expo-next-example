{"version":3,"sources":["resoflect/app.cljs"],"mappings":";;;;AASA,AAAA,AAAA,AAAAA,AAAMO;AAAN,AAAA,AAAAN,AAAA,AAAA;AAAA,AAAA,AAAAA;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACFS,AAAKC;AADT,AAEG,AAAA,AAACC,AAAMC,AAAoBH,AAAOC;;;AAFrC;AAAA,AAAA,AAAA,AAAAT,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAAA,AAAA,AAAA,AAAMD,AAGFS,AAAGI,AAAQH;AAHf,AAIG,AAACC,AAAMC,AAAoBH,AAAG,AAACK,AAAQD,AAAOH;;;AAJjD;AAAA,AAAA,AAAA,AAAAJ,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAJ,AAAAG;AAAAA,AAAA,AAAAF,AAAAE;AAAAE,AAAA,AAAAL,AAAAG;AAAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA,AAAAE,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAMA,AAAKe,AAKC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AACD,AAAAE;AAAA,AAAA,AAAAA,AAACC;;AAEP,AAAA,AAAMC;AAAN,AAIE,AAAA,AAAA,AAACC","names":["var_args","G__40170","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","resoflect.app/$","seq40165","G__40166","cljs.core/first","cljs.core/next","self__4776__auto__","seq40167","G__40168","G__40169","el","children","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","js/shadow.js.shim.module$react.createElement","props","cljs.core/clj->js","resoflect.app/styles","G__40171","js/shadow.js.shim.module$react_native.StyleSheet.create","resoflect.app/page-index","resoflect.app.$.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns resoflect.app \n  (:require\n  ;  [shadow.expo :as expo]\n   [\"react\" :as react]\n  ;  [reagent.core :as r]\n  ;  [helix.core :refer [$ defnc]]\n   [\"react-native\" :as rn]\n   ))\n\n(defn $\n  ([el & children]\n   (apply react/createElement el nil children))\n  ([el props & children]\n   (apply react/createElement el (clj->js props) children)))\n\n(def styles\n  (-> {:container {:flex 1\n                   :backgroundColor \"#fff\"\n                   :alignItems \"center\"\n                   :justifyContent \"center\"}}\n      (clj->js)\n      (rn/StyleSheet.create)))\n\n(defn page-index\n  {:export true\n   :next/page \"index\"}\n  []\n  ($ \"div\" \"Hello, world\"))\n  ; ($ rn/View ($ rn/Text \"Hello, world\"))\n\n; (defnc App [] \n;   ($ rn/View\n;      {:style (.-container styles)}\n;      ($ rn/Text \"Hello World! This is my cljs-expo app. :)\")))\n\n; (defn start\n;   {:dev/after-load true}\n;   []\n;   (expo/render-root ($ App)))\n; (defn init []\n;   (start))\n"]}